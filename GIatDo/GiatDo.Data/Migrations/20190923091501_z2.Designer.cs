// <auto-generated />
using System;
using GiatDo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GiatDo.Data.Migrations
{
    [DbContext(typeof(GiatDoDbContext))]
    [Migration("20190923091501_z2")]
    partial class z2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GiatDo.Model.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreate");

                    b.Property<Guid>("User_Id");

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("GiatDo.Model.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountId");

                    b.Property<string>("Address");

                    b.Property<DateTime>("DateCreate");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("GiatDo.Model.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountId");

                    b.Property<DateTime>("DateCreate");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<float>("Rate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("GiatDo.Model.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateTime");

                    b.Property<Guid>("CustomerId");

                    b.Property<DateTime>("DateCreate");

                    b.Property<Guid?>("ShipperDeliverId");

                    b.Property<Guid?>("ShipperTakeId");

                    b.Property<Guid?>("SlotDeliveryId");

                    b.Property<Guid?>("SlotTakeId");

                    b.Property<bool>("Status");

                    b.Property<DateTime?>("TakeTime");

                    b.Property<float>("TotalPrice");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShipperDeliverId");

                    b.HasIndex("ShipperTakeId");

                    b.HasIndex("SlotDeliveryId");

                    b.HasIndex("SlotTakeId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("GiatDo.Model.OrderService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("OrderId");

                    b.Property<string>("Price");

                    b.Property<string>("Quantity");

                    b.Property<Guid?>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderService");
                });

            modelBuilder.Entity("GiatDo.Model.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ServiceType");
                });

            modelBuilder.Entity("GiatDo.Model.Services", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Price");

                    b.Property<Guid>("ServiceTypeId");

                    b.Property<Guid>("StoreId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("StoreId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("GiatDo.Model.Shipper", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountId");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<float>("Rate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("[AccountId] IS NOT NULL");

                    b.ToTable("Shipper");
                });

            modelBuilder.Entity("GiatDo.Model.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("TimeEnd");

                    b.Property<DateTime>("TimeStart");

                    b.HasKey("Id");

                    b.ToTable("Slot");
                });

            modelBuilder.Entity("GiatDo.Model.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccountId");

                    b.Property<DateTime>("DateCreate");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<float>("Rate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Store");
                });

            modelBuilder.Entity("GiatDo.Model.Admin", b =>
                {
                    b.HasOne("GiatDo.Model.Account", "Account")
                        .WithOne("Admin")
                        .HasForeignKey("GiatDo.Model.Admin", "AccountId");
                });

            modelBuilder.Entity("GiatDo.Model.Customer", b =>
                {
                    b.HasOne("GiatDo.Model.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("GiatDo.Model.Customer", "AccountId");
                });

            modelBuilder.Entity("GiatDo.Model.Order", b =>
                {
                    b.HasOne("GiatDo.Model.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GiatDo.Model.Shipper", "ShipperDeliver")
                        .WithMany("OrderDelivery")
                        .HasForeignKey("ShipperDeliverId");

                    b.HasOne("GiatDo.Model.Shipper", "ShipperTake")
                        .WithMany("OrderTakes")
                        .HasForeignKey("ShipperTakeId");

                    b.HasOne("GiatDo.Model.Slot", "SlotDelivery")
                        .WithMany("OrdersDelivery")
                        .HasForeignKey("SlotDeliveryId");

                    b.HasOne("GiatDo.Model.Slot", "SlotTake")
                        .WithMany("OrderTake")
                        .HasForeignKey("SlotTakeId");
                });

            modelBuilder.Entity("GiatDo.Model.OrderService", b =>
                {
                    b.HasOne("GiatDo.Model.Order", "Order")
                        .WithMany("OrderServices")
                        .HasForeignKey("OrderId");

                    b.HasOne("GiatDo.Model.Services", "Service")
                        .WithMany("OrderServices")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("GiatDo.Model.Services", b =>
                {
                    b.HasOne("GiatDo.Model.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GiatDo.Model.Store", "Store")
                        .WithMany("Services")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GiatDo.Model.Shipper", b =>
                {
                    b.HasOne("GiatDo.Model.Account", "Account")
                        .WithOne("Shipper")
                        .HasForeignKey("GiatDo.Model.Shipper", "AccountId");
                });

            modelBuilder.Entity("GiatDo.Model.Store", b =>
                {
                    b.HasOne("GiatDo.Model.Account", "Account")
                        .WithOne("Store")
                        .HasForeignKey("GiatDo.Model.Store", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
